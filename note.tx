header {
  nav {
    display: flexbox;
    a {
      margin-right: 10px;
      text-decoration: none;
      padding: 5px 10px;
      border-radius: 5px;
      box-shadow: var(--lbs) 0.1px 0.3px 0.9px;
      font-size: small;
      font-weight: 600;
      color: light-dark(var(--dc), var(--lc));
    }
    a:hover {
      background-color: light-dark(var(--la), var(--da));
      color: var(--lc);
    }
  }

  @media (max-width: 270px) {
    nav {
      display: none;
    }
  }
}

import { Hono, serveStatic } from "./deps/hono.ts";
import {
  type Route,
  imagesRoutes,
  indexRoute,
  postRoutes,
  pageRoutes,
} from "./routes/mod.ts";
import { type MarkOpts, mark } from "./lib/mark.ts";
import { MainLayout } from "./components/MainLayout.tsx";

const app = new Hono();

app.get("/", (c) => {
  const md: MarkOpts = mark(indexRoute.file);
  const inner = { _html: md.html };
  return c.html(
    <MainLayout seoTitle={md.title}>
      <article dangerouslySetInnerHTML={{ __html: inner._html }} />
    </MainLayout>
  );
});

pageRoutes.map((i: Route) => {
  const md: MarkOpts = mark(i.file);
  const htm = `
      <article>${md.html}</article>
    `;
  const inner = { _html: htm };
  app.get(i.path, (c) => {
    return c.html(
      <MainLayout seoTitle={md.title}>
        <article dangerouslySetInnerHTML={{ __html: inner._html }} />
      </MainLayout>
    );
  });
});

postRoutes.map((i: Route) => {
  const md: MarkOpts = mark(i.file);
  const htm = `
    <h1>${md.title}</h1>
    <p>${md.description}</p>
    <small>${md.date}</small>
    <article>${md.html}</article>
  `;
  const inner = { _html: htm };
  app.get(i.path, (c) => {
    return c.html(
      <MainLayout seoTitle={md.title}>
        <article dangerouslySetInnerHTML={{ __html: inner._html }} />
      </MainLayout>
    );
  });
});

imagesRoutes.map((i) => {
  return app.use(i.path, serveStatic({ path: i.file}));
});

Deno.serve({ port: 3838 }, app.fetch);

siteName,
    author,
    baseDir,
    colorScheme,
    description,
    favicon,
    generator,
    ignore,
    keywords,
    ogtitle,
    ogtype,
    ogimage,
    ogurl,


export const PostCard: FC<{ baseDir?: HonoBlogOptions["baseDir"] }> = memo(({ baseDir }) => {
   const postFiles = getMdFiles(baseDir).postsroute;
  return (
    <div class="card">
      <h3>{opts.title}</h3>
      <small class="head-small">{opts.date}</small>
      <small class="head-small">{`Reading Time: ${rt} minutes`}</small>
      <br />
      {opts.tags?.map((i) => {
        `<small class="badge">${i}</small>`;
      })}
      <br />
      <hr />
      <p>{opts.description ?? ""}</p>
    </div>
  );
});

<nav>
  <ul>
    <li>Brand</li>
    <li class="float-right tb" type="button" data-theme-toggle></li>
    <li><a href="#">Item </a></li>
    <li><a href="#">Menu â–¾</a>
      <ul>
        <li><a href="#">Menu 1</a></li>
        <li><a href="#">Menu 2</a></li>
      </ul>
    </li>
    <li class="float-right">Collapse</li>
  </ul>
</nav>

 <br />
      {opts.tags?.map((i) => {
        `<small class="badge">${i}</small>`;
      })}
      <br />

      app/logo.png

      ![foo](foo.jpg =100x80)     simple, assumes units are in px
![bar](bar.jpg =100x*)      sets the height to "auto"
![baz](baz.jpg =80%x5em)  Image with width of 80% and height of 5em